@page "/moviedetail/{movieid:int}"

@if (movie == null)
{
    <Loader />
}

else
{
    <div class="container">
        <div class="cardMovie" style="border: none">
            <div class="container-fliud">
                <div class="wrapper row">
                    <div class="preview col-md-6">

                        <div class="preview-pic tab-content">
                            @if (movie.trailer_link != null)
                            {
                                <div class="tab-pane active" id="pic-1">
                                    <iframe width="420" height="315" src="@movie.trailer_link"></iframe>
                                </div>

                            }
                            else
                            {
                                <div class="tab-pane active" id="pic-2">
                                    <img src="@movie.poster_path" />
                                </div>
                            }



                        </div>

                    </div>
                    <div class="details col-md-6">
                        <h3 class="product-title">@movie.title</h3>
                        <div class="rating">
                            <div class="stars">
                                @for (int i = 1; i <= movie.vote_average; i++)
                                {
                                    <span class="fa fa-star checked"></span>

                                }
                                <span>@movie.vote_average</span>

                            </div>
                        </div>
                        <p class="product-description">@movie.overview</p>

                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-50 mb-100">
            <div class="container mt-5 mb-5">
                <div class="d-flex justify-content-center row" style="background:white!important">
                    <div class="d-flex flex-column col-md-8">
                        @if (commentViewModel != null)
                        {
                            @foreach (var item in commentViewModel)
                            {
                                <div class="d-flex flex-row align-items-center text-left comment-top p-2 bg-white border-bottom px-4">
                                    <div class="profile-image"><img class="rounded-circle" src="/images/anonymous.jpg" width="70"></div>
                                    <div class="d-flex flex-column-reverse flex-grow-0 align-items-center votings ml-1"><i class="fa fa-sort-up fa-2x hit-voting"></i><i class="fa fa-sort-down fa-2x hit-voting"></i></div>
                                    <div class="d-flex flex-column ml-3">
                                        <div class="d-flex flex-row post-title ml-10">
                                            <h5>@item.Comment</h5>
                                            <span class="ml-2">(@item.UserName)</span>
                                        </div>
                                        <div class="d-flex flex-row align-items-center align-content-center post-title ml-10">
                                            <span>@item.CommentDate</span>

                                        </div>
                                        <div class="col-md-4">
                                        </div>
                                        <div class="col-md-4">
                                        </div>
                                        <div class="col-md-4">
                                            <AuthorizeView Roles="FOUNDER">
                                                <button @onclick="() => Delete(item)" style="margin-left:5px;" class="btn btn-danger">Delete</button>
                                            </AuthorizeView>
                                        </div>


                                    </div>
                                </div>
                            }
                        }

                        <AuthorizeView>
                            <Authorized>

                                <div class="coment-bottom bg-white p-2 px-4">
                                    <div class="d-flex flex-row add-comment-section mt-4 mb-4">
                                        <img class="img-fluid img-responsive rounded-circle mr-2" src="/images/anonymous.jpg" width="70">
                                        <div class="input-bar">

                                            <div class="input-bar-item width100">
                                                <EditForm Context="comment" Model=@movieComment OnValidSubmit="@AddComment">

                                                    <InputText type="text" id="inoutComment" class="formControl mr-3" placeholder="Add comment" @bind-Value="movieComment.Comment"></InputText>
                                                    <ValidationMessage For="@(()=>movieComment.Comment)"></ValidationMessage>

                                                    <button class="btn btn-primary ml-10" type="submit">Comment</button>

                                                </EditForm>

                                            </div>


                                        </div>

                                    </div>

                                </div>

                            </Authorized>
                            <NotAuthorized>
                                <NavLink class="nav-link" href="signin">
                                    <h3>Please sign in to post a comment</h3>
                                </NavLink>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>

                </div>
            </div>

        </div>

    </div>
}




@code {
    [Inject] HttpClient httpClient { get; set; }
    [Inject] IMovieService movieService { get; set; }
    [Inject] AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject] NavigationManager navigationManager { get; set; }

    [Parameter]
    public int MovieId { get; set; }

    public List<Video> videos { get; set; }
    public IList<CommentViewModel> commentViewModel { get; set; }
    public Movie movie { get; set; }
    public VideoRoot rootVideo { get; set; }
    private User user = new User();
    private MovieComment movieComment = new MovieComment();



    public string startVideo = APIEndpoints.s_startLink;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var loggedUser = authState.User;

        if (loggedUser.Identity.IsAuthenticated)
        {
            movieComment.UserId = authState.User.Claims.FirstOrDefault(p => p.Type == "Id").Value;
            movieComment.MovieId = MovieId;
        }


        await GetMovie(MovieId);
        commentViewModel = await (movieService.GetMovieComments(MovieId));


    }

    private async Task GetMovie(int movieId)
    {
        movie = await movieService.GetMovie(movieId);

        movie.poster_path = APIEndpoints.s_startImg + movie.poster_path;

        rootVideo = await movieService.GetVideoRoot(movieId);

        videos = rootVideo.results;

        if (videos.Count > 0)
        {
            //startVideo += videos.FirstOrDefault(p => p.type == "Trailer").key;
            //movie.trailer_link = startVideo;


            var trailer = videos.FirstOrDefault(p => p.type == "Trailer").key;

            if (trailer==null)
            {
                startVideo += videos[0].key;
            }
            else
            {
                startVideo += trailer;
            }

            movie.trailer_link = startVideo;

        }
    }

    private async Task AddComment()
    {
        HttpResponseMessage httpResponseMessage = await movieService.AddComment(movieComment);


        if (httpResponseMessage.IsSuccessStatusCode)
        {

            //var result =await  httpResponseMessage.Content.ReadFromJsonAsync<CommentViewModel>();
            //commentView =result;

            //CommentViewModel commentView = new CommentViewModel();
            //commentView.Comment = movieComment.Comment;
            //commentView.CommentDate = movieComment.CreateDate;
            //commentView.CommentId = movieComment.Id;
            //commentView.UserName = user.Email;


            //commentViewModel.Add(commentView);

            navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);


        }
    }
    private async Task Delete(CommentViewModel cVm)
    {
        HttpResponseMessage httpResponseMessage = await movieService.DeleteComment(cVm);

        if (httpResponseMessage.IsSuccessStatusCode)
        {
            commentViewModel = commentViewModel.Where(p => p.CommentId != cVm.CommentId).ToList();
        }

    }
    private void Refresh()
    {
        var timer = new Timer(new TimerCallback(_ =>
           {
               navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
           }), null, 2000, 2000);


        var url = "/moviedetail/" + MovieId.ToString();
    }
}
