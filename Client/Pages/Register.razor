@page "/register"

@if (!registerStatus)
{

        <EditForm Model="@user" OnValidSubmit="@RegisterUser">
            <DataAnnotationsValidator />
            <div class="form-group my-3">
                <label for="inputEmail" class="sr-only">Email address</label>
                <InputText type="text" id="inputEmail" class="form-control" placeholder="Username" @bind-Value="user.Email"></InputText>
                <ValidationMessage For="@(()=>user.Email)"></ValidationMessage>
            </div>
            <div class="form-grou my-3">
                <label for="inputPassword" class="sr-only">Password</label>
                <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="user.Password"></InputText>
                <ValidationMessage For="@(()=>user.Password)"></ValidationMessage>
            </div>

            <ValidationSummary />

            <button class="btn btn-lg btn-primary btn-block" type="submit">Register</button>

            @if (attempToRegisterFailed)
            {
                <p class="my-3 text-danger">@registerErrorMessage</p>
            }

        </EditForm>
}
else
{
    <h4>Register succesfull! Press the button below to go to the sign in page.</h4>
    <a href="/signin" class="btn btn-primary btn-lg">Sign In</a>

}



@code {
    [Inject]
    HttpClient httpClient { get; set; }
    private bool registerStatus = false;
    private string? registerErrorMessage = null;
    private bool attempToRegisterFailed = false;
    private User user = new User();


    private async Task RegisterUser()
    {
        HttpResponseMessage httpResponseMessage = await httpClient.PostAsJsonAsync(APIEndpoints.s_register, user);

        if (httpResponseMessage.IsSuccessStatusCode)
        {
            registerStatus = true;
        }
        else
        {
            attempToRegisterFailed = true;
            registerErrorMessage = await httpResponseMessage.Content.ReadAsStringAsync();
        }
    }
}
